# Biblioth√®ques pour la gestion des donn√©es
import pandas as pd
import numpy as np

# Biblioth√®ques pour les analyses statistiques
from lifelines import KaplanMeierFitter, NelsonAalenFitter, CoxPHFitter
from lifelines.statistics import logrank_test

# Biblioth√®ques pour la visualisation
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Biblioth√®que pour l'interface utilisateur et le tableau de bord
import streamlit as st

# --------- CONFIG ---------
st.set_page_config(page_title="Analyse de Survie", layout="wide")

uploaded_file = st.sidebar.file_uploader("üìÇ Charger un fichier CSV", type=["csv"])
encoding = st.sidebar.selectbox("üî§ Encodage du fichier", ["utf-8", "latin1"])

@st.cache_data
def load_data(file, encoding):
    return pd.read_csv(file, encoding=encoding)

if uploaded_file is not None:
    df = load_data(uploaded_file, encoding)
else:
    st.warning("Veuillez charger un fichier CSV pour continuer.")
    st.stop()


# --------- CHARGER LE FICHIER ---------
# encoding = st.sidebar.selectbox("Encodage", ["utf-8", "latin1"], key="encoding_selector")


# @st.cache_data
# def load_data():
    # df = pd.read_csv("survival_data_1000.csv", encoding=encoding)
    # return df

# --------- SIDEBAR ---------
st.sidebar.header("üéØ Filtres d'analyse")
variables = ["Age", "Sex", "Smoker", "Comorbidities", "Treatment",
             "BMI", "Physical_Activity", "Time_to_Event", "Event_Observed"]
selected_variables = st.sidebar.multiselect("Variables √† inclure :", variables)


# --------- CREATION DES TRANCHES D'AGE ET DE BMI ---------

def create_age_bmi_bins(df):
    # Cr√©er les tranches d'√¢ge
    bins_age = [0, 50, 60, 100]
    labels_age = ["<50", "50-60", ">60"]
    df["Tranche_Age"] = pd.cut(df["Age"], bins=bins_age, labels=labels_age, right=False)

    # Cr√©er les tranches de BMI
    bins_bmi = [0, 18, 26, 50]
    labels_bmi = ["<18", "18-26", ">26"]
    df["Tranche_BMI"] = pd.cut(df["BMI"], bins=bins_bmi, labels=labels_bmi, right=False)

    return df


df = load_data(uploaded_file, encoding)
df = create_age_bmi_bins(df)

# --------- AFFICHAGE DES TRANCHES D'AGE ET DE BMI ---------
st.sidebar.subheader("üìå Sous-groupes par tranche d'√¢ge et de BMI")
age_group = st.sidebar.multiselect("Tranches d'√¢ge",
                                   ["Choose an option"] + list(df["Tranche_Age"].unique())
                                   # Option par d√©faut "Choose an option"
                                   )
bmi_group = st.sidebar.multiselect("Tranches de BMI",
                                   ["Choose an option"] + list(df["Tranche_BMI"].unique())
                                   # Option par d√©faut "Choose an option"
                                   )

# -------- MENU NAVIGABLE --------
st.title("üìà Dashboard d'Analyse de Survie ")

sections = [
    "Visualisation des donn√©es",
    "Traitement des donn√©es",
    "Statistiques descriptives",
    "Repr√©sentations graphiques des variables",
    "Probabilit√©s et courbes de survie",
    "Pr√©diction de survie d‚Äôun individu",
    "Mod√®le de r√©gression de Cox",
    "R√©sum√© interactif",
    "√Ä propos du projet"
]

# --------- MENU DEROULANT EN HAUT ---------
selected_section = st.selectbox("üîç Choisir une analyse :", sections)

# -------- CONTENU DYNAMIQUE --------
if selected_section == "Visualisation des donn√©es":
    st.subheader("üîç Visualisation des donn√©es")

    # --------- APPLIQUER LES FILTRES ---------

    # Des tranches d'√¢ge et de BMI
    if "Choose an option" not in age_group and "Choose an option" not in bmi_group:
        filtered_df = df[
            (df["Tranche_Age"].isin(age_group)) &
            (df["Tranche_BMI"].isin(bmi_group))
            ]
    elif "Choose an option" not in age_group:
        filtered_df = df[df["Tranche_Age"].isin(age_group)]  # Filtrer seulement par les tranches d'√¢ge s√©lectionn√©es
    elif "Choose an option" not in bmi_group:
        filtered_df = df[df["Tranche_BMI"].isin(bmi_group)]  # Filtrer seulement par les tranches de BMI s√©lectionn√©es
    else:
        filtered_df = df  # Pas de filtre appliqu√© si l'utilisateur n'a pas s√©lectionn√© une option

    # Des variables s√©lectionn√©es
    if selected_variables:
        selected_variables = selected_variables + ["Tranche_Age", "Tranche_BMI"]
        filtered_df = filtered_df[selected_variables]

        # Affichage des 10 premi√®res lignes des donn√©es filtr√©es
    st.write("Voici un aper√ßu des 10 premi√®res lignes de vos donn√©es filtr√©es :")
    st.dataframe(filtered_df.head(10))
    st.markdown(f"**Nombre de lignes s√©lectionn√©es :** {len(filtered_df)}")

elif selected_section == "Traitement des donn√©es":
    st.subheader("üßº Traitement des donn√©es manquantes")
    st.write("(Infos et outils pour nettoyer les donn√©es)")

    # --------- GESTION DES DOUBLONS ---------
    if st.button("Lancer la suppression des doublons"):
        # Colonnes qui d√©finissent un patient
        patient_columns = [
            "Age", "Sex", "Smoker", "Comorbidities", "Treatment",
            "BMI", "Physical_Activity", "Time_to_Event", "Event_Observed"
        ]

        # Marquer les doublons uniquement pour les Event_Observed = 0
        is_duplicate = df["Event_Observed"].eq(0) & df.duplicated(subset=patient_columns)

        # Identifier les lignes marqu√©es comme doublons
        duplicates_to_drop = df[is_duplicate]

        # Supprimer les lignes marqu√©es comme doublons
        df = df[~is_duplicate]

        # Afficher les lignes qui vont √™tre supprim√©es
        st.write("üîç Lignes identifi√©es comme doublons √† supprimer :")
        st.write(duplicates_to_drop)

        # Afficher combien on va en supprimer
        num_duplicates = is_duplicate.sum()
        st.write(f"Nombre de doublons supprim√©s (Event_Observed = 0) : {num_duplicates}")

        # Afficher le dataframe nettoy√©
        st.write(df)

        # Voir le nombre de doublons parmi les patients non observ√©s
        st.markdown(f"**Nombre de lignes actuelles dans le jeu de donn√©es :** {len(df)}")

    if st.button("Lancer la gestion des donn√©es manquantes"):
        st.subheader("üìã Gestion des donn√©es manquantes")

        # Affichage des colonnes avec des valeurs manquantes
        missing_info = df.isnull().sum()
        missing_info = missing_info[missing_info > 0]

        if missing_info.empty:
            st.success("‚úÖ Aucune donn√©e manquante d√©tect√©e.")
        else:
            st.write("üîç Colonnes avec donn√©es manquantes :")
            st.write(missing_info)

            option = st.selectbox("M√©thode de traitement :",
                                  ["Supprimer lignes", "Remplacer par moyenne", "Remplacer par m√©diane"])

            if st.button("Appliquer le traitement"):
                if option == "Supprimer lignes":
                    df.dropna(inplace=True)
                    st.success("Lignes contenant des NaN supprim√©es.")
                elif option == "Remplacer par moyenne":
                    for col in df.select_dtypes(include=['number']).columns:
                        df[col].fillna(df[col].mean(), inplace=True)
                    st.success("Valeurs manquantes remplac√©es par la moyenne.")
                elif option == "Remplacer par m√©diane":
                    for col in df.select_dtypes(include=['number']).columns:
                        df[col].fillna(df[col].median(), inplace=True)
                    st.success("Valeurs manquantes remplac√©es par la m√©diane.")

                st.write("DataFrame apr√®s traitement :")
                st.dataframe(df)


elif selected_section == "Statistiques descriptives":
    st.subheader("üìä Statistiques descriptives")
    st.write(df.describe())

    st.sidebar.markdown("---")
    # Histogramme interactif
    var = st.selectbox("Choisir une variable", df.select_dtypes(include='number').columns)
    fig = px.histogram(df, x=var, nbins=20)
    st.plotly_chart(fig)

elif selected_section == "Repr√©sentations graphiques des variables":
    st.subheader("üìà Repr√©sentations graphiques des variables")
    st.write("(Histogrammes, boxplots, etc.)")

    numeric_cols = df.select_dtypes(include='number').columns.tolist()
    categorical_cols = df.select_dtypes(exclude='number').columns.tolist()

    st.markdown("### üìä Histogramme d'une variable num√©rique")
    num_var = st.selectbox("Choisir une variable num√©rique :", numeric_cols)
    fig = px.histogram(df, x=num_var, nbins=30, title=f"Histogramme de {num_var}")
    st.plotly_chart(fig)

    st.markdown("### üì¶ Boxplot par variable cat√©gorielle")
    if categorical_cols and numeric_cols:
        cat_var = st.selectbox("Variable cat√©gorielle :", categorical_cols)
        num_var2 = st.selectbox("Variable num√©rique :", numeric_cols, key="boxplot")
        fig2 = px.box(df, x=cat_var, y=num_var2, title=f"Boxplot de {num_var2} par {cat_var}")
        st.plotly_chart(fig2)


elif selected_section == "Probabilit√©s et courbes de survie":
    st.subheader("‚è≥ Probabilit√©s et courbes de survie")
    st.write("(Kaplan-Meier, etc.)")

    # V√©rification des colonnes n√©cessaires
    if "Time_to_Event" in df.columns and "Event_Observed" in df.columns:
        # --------- ESTIMATION DE KAPLAN-MEIER ---------
        st.subheader("1Ô∏è‚É£ Courbe de survie globale (Kaplan-Meier)")
        kmf = KaplanMeierFitter()
        kmf.fit(durations=df["Time_to_Event"], event_observed=df["Event_Observed"])

        # --------- TABLEAU DES PROBABILITES ---------
        st.markdown("### üìå Probabilit√©s de survie √† chaque instant t")
        st.dataframe(kmf.survival_function_.reset_index().rename(columns={
            "timeline": "Temps (t)",
            "KM_estimate": "Probabilit√© de survie"
        }).head(10))

        # --------- COURBE GLOBALE ---------
        st.markdown("### üìà Courbe de survie globale avec intervalle de confiance")
        window_width = 550
        fig_width = window_width // 40
        fig_height = 6  # Hauteur standard pour la courbe

        fig, ax = plt.subplots(figsize=(fig_width, fig_height))
        kmf.plot_survival_function(ax=ax, ci_show=True)
        ax.set_title("Courbe de survie - Kaplan-Meier")
        ax.set_xlabel("Temps")
        ax.set_ylabel("Probabilit√© de survie")
        st.pyplot(fig)
        plt.close(fig)

        # --------- COURBE PAR GROUPE ---------
        st.subheader("2Ô∏è‚É£ Comparaison selon un crit√®re")
    # On conserve uniquement les variables cat√©gorielles pr√©sentes dans le DataFrame
    kmf_vars = ["Sex", "Smoker", "Comorbidities", "Treatment", "Physical_Activity", "Tranche_Age", "Tranche_BMI"]

    if kmf_vars:
        selected_group = st.selectbox("Choisir une variable de regroupement :", kmf_vars)

        # Taille du graphique
        window_width = 550
        fig_width = window_width // 40
        fig_height = 6  # Hauteur standard pour la courbe

        fig_group, ax_group = plt.subplots(figsize=(fig_width, fig_height))
        for group in df[selected_group].dropna().unique():
            mask = df[selected_group] == group
            kmf.fit(df["Time_to_Event"][mask], df["Event_Observed"][mask], label=str(group))
            kmf.plot_survival_function(ax=ax_group, ci_show=True)

        ax_group.set_title(f"Courbe de survie selon {selected_group}")
        ax_group.set_xlabel("Temps")
        ax_group.set_ylabel("Probabilit√© de survie")
        st.pyplot(fig_group)

        if len(df[selected_group].unique()) == 2:  # Si 2 groupes √† comparer
            group1 = df[selected_group] == df[selected_group].unique()[0]
            group2 = df[selected_group] == df[selected_group].unique()[1]
            results = logrank_test(
                df["Time_to_Event"][group1], df["Time_to_Event"][group2],
                df["Event_Observed"][group1], df["Event_Observed"][group2]
            )
            st.write(f"**Test de log-rank** : p-value = {results.p_value:.4f}")
        st.markdown("---")

    else:
        st.warning("Aucune variable cat√©gorielle de regroupement disponible.")


elif selected_section == "Pr√©diction de survie d‚Äôun individu":
    st.subheader("ü§ñ Pr√©diction de survie d‚Äôun individu")
    st.write("(Mod√®le pr√©dictif appliqu√© √† un individu)")

    # V√©rification des colonnes n√©cessaires
    if "Time_to_Event" in df.columns and "Event_Observed" in df.columns:
        naf = NelsonAalenFitter()
        naf.fit(durations=df["Time_to_Event"], event_observed=df["Event_Observed"])

        # --------- COURBE DU RISQUE CUMUL√â ---------
        st.markdown("### üìà Courbe du risque cumul√©")

        # Taille du graphique
        window_width = 550
        fig_width = window_width // 40
        fig_height = 6  # Hauteur standard pour la courbe

        fig_risk, ax_risk = plt.subplots(figsize=(fig_width, fig_height))
        naf.plot_cumulative_hazard(ax=ax_risk)
        ax_risk.set_title("Courbe du risque cumul√© (Nelson-Aalen)")
        ax_risk.set_xlabel("Temps")
        ax_risk.set_ylabel("Risque cumul√©")
        st.pyplot(fig_risk)

        # --------- EXPLICATION DE L‚Äô√âVOLUTION DU RISQUE ---------
        st.markdown("""
        ### üìå Explication de l‚Äô√©volution du risque en fonction du temps
        La courbe du risque cumul√©e montre l'√©volution du risque qu'un √©v√©nement se produise au fil du temps. 
        Au fur et √† mesure que le temps passe, le risque cumulatif peut augmenter, indiquant que le risque 
        d'un √©v√©nement devient plus probable au fur et √† mesure que l'on avance dans le temps.
        """)  # A refaire

        # --------- ESTIMATION DE LA SURVIE POUR UN TEMPS DONN√â ---------
        st.subheader("2Ô∏è‚É£ Estimation de la survie pour un temps donn√©")
        time_input = st.number_input("Entrez un temps pour estimer la survie :", min_value=0, value=12)

        kmf = KaplanMeierFitter()
        kmf.fit(durations=df["Time_to_Event"], event_observed=df["Event_Observed"])

        # Calcul de la probabilit√© de survie
        survival_probability = kmf.predict(time_input)

        # Affichage de l'estimation de survie √† ce temps
        st.markdown(f"### üìä Estimation de la survie √† t={time_input} : {survival_probability:.3f}")

        # --------- EXPLICATION DE L‚Äô√âVOLUTION DU RISQUE ---------
        st.markdown("""
            ### üìå Explication de la m√©thode de Nelson-Aalen et de la courbe de risque cumul√©

            La m√©thode de Nelson-Aalen est utilis√©e pour estimer la fonction de risque cumul√© √† partir de donn√©es de survie. 
            Contrairement √† la m√©thode de Kaplan-Meier qui estime la probabilit√© de survie, Nelson-Aalen se concentre sur le risque d'√©v√©nement au fil du temps.

            **Fonction de Risque Cumul√© :**

            La fonction de risque cumul√©, estim√©e par la m√©thode de Nelson-Aalen, repr√©sente le risque total qu'un √©v√©nement (comme le d√©c√®s ou la d√©faillance) se soit produit jusqu'√† un certain moment. 
            Elle est calcul√©e en additionnant les risques instantan√©s √† chaque instant o√π un √©v√©nement se produit.

            **Interpr√©tation de la Courbe :**

            -   **Courbe Ascendante :** Une courbe ascendante indique que le risque cumul√© augmente avec le temps. 
                Cela signifie que la probabilit√© qu'un √©v√©nement se produise s'accro√Æt √† mesure que le temps avance.
            -   **Pente Raide :** Une pente raide sugg√®re une augmentation rapide du risque, indiquant que les √©v√©nements se produisent plus fr√©quemment dans cet intervalle de temps.
            -   **Pente Douce :** Une pente douce indique une augmentation plus lente du risque, sugg√©rant que les √©v√©nements sont moins fr√©quents.
            -   **Plateaux :** Les plateaux peuvent indiquer des p√©riodes o√π le risque reste relativement constant.

            **Implications :**

            -   **Maladies :** Dans le contexte m√©dical, une augmentation du risque cumul√© peut signifier que la condition du patient se d√©t√©riore avec le temps, augmentant la probabilit√© de complications ou de d√©c√®s.
            -   **Fiabilit√© :** En ing√©nierie, cela peut indiquer une augmentation de la probabilit√© de d√©faillance d'un composant avec l'usure.

            **En r√©sum√©,** la m√©thode de Nelson-Aalen et la courbe de risque cumul√© fournissent des informations pr√©cieuses sur la dynamique du risque dans les analyses de survie, 
            compl√©tant ainsi les informations obtenues par les courbes de survie de Kaplan-Meier.
            """)

        # --------- AFFICHAGE DE LA COURBE DE SURVIE ---------
        st.subheader("üìà Courbe de survie Kaplan-Meier")

        # Taille du graphique
        window_width = 550
        fig_width = window_width // 40
        fig_height = 6  # Hauteur standard pour la courbe

        fig, ax = plt.subplots(figsize=(fig_width, fig_height))
        kmf.plot_survival_function(ax=ax)
        ax.set_title("Courbe de survie - Kaplan-Meier")
        ax.set_xlabel("Temps (mois)")
        ax.set_ylabel("Probabilit√© de survie")
        st.pyplot(fig)

    else:
        st.error("‚ùå Les colonnes 'Time_to_Event' et 'Event_Observed' sont manquantes dans le fichier CSV.")

elif selected_section == "Mod√®le de r√©gression de Cox":
    st.subheader("üìâ Mod√®le de r√©gression de Cox")

    # 1. Colonnes n√©cessaires
    required_columns = ["Time_to_Event", "Event_Observed", "Sex", "Tranche_Age",
                        "Smoker", "Treatment", "Physical_Activity"]

    # 2. V√©rification des colonnes
    missing_cols = [col for col in required_columns if col not in df.columns]
    if missing_cols:
        st.error(f"‚ùå Colonnes manquantes: {', '.join(missing_cols)}")
        st.stop()

    # 3. Cr√©ation du dataframe de travail
    df_cox = df[required_columns].copy()


    # 4. Conversion robuste des variables cat√©gorielles
    def safe_convert(series, mapping):
        """Fonction helper pour conversion s√©curis√©e"""
        try:
            # Conversion en string et nettoyage
            cleaned = series.astype(str).str.strip().str.title()
            # Application du mapping
            mapped = cleaned.map(mapping)
            # V√©rification des valeurs non mapp√©es
            if mapped.isna().any():
                st.warning(f"Valeurs non mapp√©es dans {series.name}: {cleaned[mapped.isna()].unique()}")
                mapped = mapped.fillna(mapping.get('default', 0))
            return mapped.astype(int)
        except Exception as e:
            st.error(f"Erreur conversion {series.name}: {str(e)}")
            st.write("Valeurs uniques:", series.unique())
            st.stop()


    # Mappings complets avec valeurs par d√©faut
    mappings = {
        'Sex': {'Male': 0, 'Female': 1, 'M': 0, 'F': 1, 'default': 0},
        'Smoker': {'No': 0, 'Yes': 1, '0': 0, '1': 1, 'Non': 0, 'Oui': 1, 'default': 0},
        'Treatment': {'Standard': 0, 'Experimental': 1, 'default': 0},
        'Physical_Activity': {'Low': 0, 'Moderate': 1, 'High': 2, 'default': 1},
        'Tranche_Age': {'<50': 0, '50-60': 1, '>60': 2, 'default': 1}
    }

    # Application des conversions
    for col, mapping in mappings.items():
        df_cox[col] = safe_convert(df_cox[col], mapping)

    # 5. Conversion des variables continues
    try:
        df_cox["Time_to_Event"] = pd.to_numeric(df_cox["Time_to_Event"], errors='raise')
        df_cox["Event_Observed"] = pd.to_numeric(df_cox["Event_Observed"], errors='raise')
    except Exception as e:
        st.error(f"Erreur conversion variable continue: {str(e)}")
        st.stop()

    # 6. V√©rification finale des types
    st.write("‚úÖ Types des variables apr√®s conversion:")
    st.write(df_cox.dtypes)

    # 7. Ex√©cution du mod√®le
    with st.spinner("Ajustement du mod√®le en cours..."):
        try:
            cph = CoxPHFitter()
            cph.fit(df_cox,
                    duration_col="Time_to_Event",
                    event_col="Event_Observed",
                    show_progress=True)

            # Affichage des r√©sultats
            st.success("Mod√®le ajust√© avec succ√®s!")

            # Onglets pour r√©sultats
            tab1, tab2, tab3 = st.tabs(["R√©sum√©", "Hazard Ratios", "Visualisation"])

            with tab1:
                st.subheader("R√©sum√© du mod√®le")
                try:
                    summary = cph.print_summary()

                    if summary is None:
                        st.info("") # "Le r√©sum√© du mod√®le n'est pas disponible."
                    elif isinstance(summary, pd.DataFrame):
                        st.dataframe(summary)  # Display DataFrame directly
                    elif isinstance(summary, str):
                        st.text(summary)  # Preserve formatting
                    else:
                        st.write("Type de r√©sum√© inconnu. Affichage brut :")
                        st.write(summary)  # Fallback

                    # --- Detailed Interpretation ---
                    st.markdown("#### Interpr√©tation des coefficients")
                    if isinstance(cph.summary, pd.DataFrame):  # Check if summary is available as DataFrame
                        for var in cph.summary.index:
                            coef = cph.summary.loc[var, 'coef']
                            hr = np.exp(coef)
                            p_value = cph.summary.loc[var, 'p']

                            st.write(f"**Variable:** `{var}`")
                            st.write(f"  - Coefficient (log HR): {coef:.3f}")
                            st.write(f"  - Hazard Ratio (HR): {hr:.3f}")
                            st.write(f"  - p-value: {p_value:.3f}")

                            if p_value < 0.05:
                                st.success(f"  La variable `{var}` est statistiquement significative.")
                            else:
                                st.warning(f"  La variable `{var}` n'est pas statistiquement significative.")

                            if hr > 1:
                                st.write(f"  Un HR de {hr:.3f} sugg√®re un risque accru de l'√©v√©nement.")
                            elif hr < 1:
                                st.write(f"  Un HR de {hr:.3f} sugg√®re un risque r√©duit de l'√©v√©nement.")
                            else:
                                st.write(f"  Un HR de {hr:.3f} sugg√®re aucun effet sur le risque.")

                    else:
                        st.info(
                            "L'interpr√©tation d√©taill√©e n'est pas disponible car le r√©sum√© du mod√®le n'est pas au format DataFrame.")


                except Exception as e:
                    st.error(f"Erreur lors de l'affichage du r√©sum√© : {e}")

            with tab2:
                st.subheader("Hazard Ratios")
                st.dataframe(cph.hazard_ratios_.sort_values(ascending=False))
                st.write("Interpr√©tation: Un ratio > 1 indique un risque accru, < 1 un risque r√©duit.")
                st.write(cph.confidence_intervals_)  # Add confidence intervals

                # Interpretation of Hazard Ratios
                st.markdown("""
                **Interpr√©tation des Hazard Ratios :**

                -   Un Hazard Ratio (HR) de 1 indique que la variable n'a aucun effet sur le risque.
                -   Un HR sup√©rieur √† 1 sugg√®re un risque accru de l'√©v√©nement.
                -   Un HR inf√©rieur √† 1 sugg√®re un risque r√©duit de l'√©v√©nement.

                Par exemple, si le HR pour 'Smoker' est de 1.5, cela signifie que les fumeurs ont un risque 50% plus √©lev√© de l'√©v√©nement par rapport aux non-fumeurs, en supposant que toutes les autres variables restent constantes.
                """)

            with tab3:
                st.subheader("Visualisation des effets")
                var = st.selectbox("Variable √† analyser",
                                   [c for c in df_cox.columns if c not in ['Time_to_Event', 'Event_Observed']])

                try:
                    if df_cox[var].nunique() <= 5:  # Pour variables cat√©gorielles
                        fig, ax = plt.subplots(figsize=(10, 6))
                        values = sorted(df_cox[var].unique())
                        cph.plot_covariate_groups(var, values=values, ax=ax)
                        ax.set_title(f"Effet de {var} sur la survie")
                        st.pyplot(fig)
                    else:  # Pour variables continues
                        fig, ax = plt.subplots(figsize=(10, 6))
                        cph.plot_partial_effects_on_outcome(var, values=[df_cox[var].min(),
                                                                         df_cox[var].median(),
                                                                         df_cox[var].max()], ax=ax)
                        ax.set_title(f"Effet marginal de {var}")
                        st.pyplot(fig)
                except Exception as e:
                    st.warning(f"Visualisation avanc√©e impossible: {str(e)}")
                    # Solution de repli
                    st.write("üîç Coefficients pour cette variable:")
                    if var in cph.hazard_ratios_.index:
                        st.metric(f"Hazard Ratio pour {var}",
                                  value=round(cph.hazard_ratios_[var], 2),
                                  help="HR > 1 = risque accru, HR < 1 = risque r√©duit")
                    else:
                        st.write("Variable non trouv√©e dans le mod√®le")

                # Pr√©dictions interactives
                st.subheader("Simulateur de survie")
                col1, col2 = st.columns(2)
                with col1:
                    value = st.slider(f"Valeur de {var}",
                                      float(df_cox[var].min()),
                                      float(df_cox[var].max()),
                                      float(df_cox[var].median()))

                with col2:
                    time_points = st.slider("P√©riode d'√©valuation",
                                            int(df_cox["Time_to_Event"].min()),
                                            int(df_cox["Time_to_Event"].max()),
                                            int(df_cox["Time_to_Event"].median()))

                # Calcul des pr√©dictions
                pred_df = df_cox.mean().to_frame().T
                pred_df[var] = value

                try:
                    survival_prob = cph.predict_survival_function(pred_df, times=[time_points]).iloc[0, 0]
                    st.metric(f"Probabilit√© de survie √† {time_points} ",
                              value=f"{survival_prob:.1%}",
                              help="Probabilit√© qu'un patient avec ces caract√©ristiques survive jusqu'√† ce moment")

                    # Courbe de survie compl√®te
                    fig, ax = plt.subplots(figsize=(10, 4))
                    cph.predict_survival_function(pred_df).plot(ax=ax)
                    ax.axvline(x=time_points, color='red', linestyle='--')
                    ax.set_title("Courbe de survie pr√©dite")
                    st.pyplot(fig)

                except Exception as e:
                    st.error(f"Erreur de pr√©diction: {str(e)}")

                # V√©rification de l'hypoth√®se de proportionnalit√©
                st.subheader("V√©rification de l'hypoth√®se de proportionnalit√© des risques")
                try:
                    results = cph.check_assumptions(df_cox, p_value_threshold=0.05, show_plots=False)

                    st.write("R√©sultats de la v√©rification :")

                    # Improved display of results
                    if results is None:
                        st.info("Aucun test de proportionnalit√© des risques n'a √©t√© effectu√©.")
                    elif isinstance(results, dict):
                        for var, result in results.items():
                            st.write(f"Variable: {var}")
                            if isinstance(result, bool):
                                st.write(f"  Proportional Hazards: {result}")
                            elif isinstance(result, pd.Series):
                                st.write("  Test Results:")
                                st.dataframe(result.to_frame(name="p-value"))  # Display as DataFrame
                            else:
                                st.write(f"  R√©sultat: {result}")  # Generic display
                    elif isinstance(results, list):
                        if not results:
                            st.info("Tous les tests de proportionnalit√© des risques sont pass√©s.")
                        else:
                            for item in results:
                                st.write(f"  {item}")  # Display each item in the list
                    else:
                        st.write(results)  # Fallback to displaying the raw results

                    # Interpretation (as before, but adjust based on displayed 'results')
                    if isinstance(results, dict) and results.get('non-proportional'):
                        non_prop_vars = results['non-proportional']
                        st.warning(f"L'hypoth√®se de proportionnalit√© n'est pas v√©rifi√©e pour : {non_prop_vars}")
                        st.write(
                            "Interpr√©tation : Les effets de ces variables peuvent varier avec le temps. Le mod√®le de Cox standard peut ne pas √™tre enti√®rement appropri√©.")
                    elif isinstance(results, list) and results:  # Check if the list is not empty
                        non_prop_vars = [item[0] for item in results if item[1] is False]
                        st.warning(f"L'hypoth√®se de proportionnalit√© n'est pas v√©rifi√©e pour : {non_prop_vars}")
                        st.write(
                            "Interpr√©tation : Les effets de ces variables peuvent varier avec le temps. Le mod√®le de Cox standard peut ne pas √™tre enti√®rement appropri√©.")
                    else:
                        st.success("L'hypoth√®se de proportionnalit√© des risques est globalement v√©rifi√©e.")

                except Exception as e:
                    st.error(f"Erreur lors de la v√©rification des hypoth√®ses : {e}")

        except Exception as e:
            st.error(f"√âchec de l'ajustement: {str(e)}")
            st.write("üîç D√©tails des donn√©es utilis√©es:")
            st.dataframe(df_cox.describe(include='all'))
            st.write("Types finaux:")
            st.write(df_cox.dtypes)

elif selected_section == "R√©sum√© interactif":
    st.title("üìä R√©sum√© - Vue d'ensemble des patients")

    # üéõÔ∏è Filtres dans la sidebar
    st.sidebar.subheader("üéõÔ∏è Filtres pour le r√©sum√©")
    sex_filter = st.sidebar.multiselect("Sexe :", df["Sex"].dropna().unique(),
                                        default=list(df["Sex"].dropna().unique()))
    smoker_filter = st.sidebar.multiselect("Fumeur :", df["Smoker"].dropna().unique(),
                                           default=list(df["Smoker"].dropna().unique()))
    treat_filter = st.sidebar.multiselect("Traitement :", df["Treatment"].dropna().unique(),
                                          default=list(df["Treatment"].dropna().unique()))
    activity_filter = st.sidebar.multiselect("Activit√© physique :", df["Physical_Activity"].dropna().unique(),
                                             default=list(df["Physical_Activity"].dropna().unique()))

    df_filtered = df[
        (df["Sex"].isin(sex_filter)) &
        (df["Smoker"].isin(smoker_filter)) &
        (df["Treatment"].isin(treat_filter)) &
        (df["Physical_Activity"].isin(activity_filter))
        ]

    # ‚úÖ Statistiques globales
    st.subheader("üßÆ Statistiques g√©n√©rales")
    col1, col2, col3 = st.columns(3)
    col1.metric("Patients filtr√©s", len(df_filtered))
    col2.metric("√âv√©nements observ√©s", int(df_filtered["Event_Observed"].sum()))
    col3.metric("Dur√©e moyenne", round(df_filtered["Time_to_Event"].mean(), 1))

    # üîÅ Ratios H/F et par classe BMI
    col4, col5 = st.columns(2)
    if "Sex" in df_filtered.columns:
        sex_ratio = df_filtered["Sex"].value_counts(normalize=True) * 100
        with col4:
            st.markdown("#### üîπ R√©partition H/F")
            for k, v in sex_ratio.items():
                st.write(f"{k} : {v:.1f}%")
    if "Tranche_BMI" in df_filtered.columns:
        bmi_ratio = df_filtered["Tranche_BMI"].value_counts(normalize=True) * 100
        with col5:
            st.markdown("#### üîπ R√©partition par classe BMI")
            for k, v in bmi_ratio.items():
                st.write(f"{k} : {v:.1f}%")

    st.markdown("---")

    # üì¶ Barplots des variables cat√©gorielles
    st.subheader("üì¶ R√©partition des variables cl√©s")
    col6, col7, col8 = st.columns(3)

    with col6:
        treat_counts = df_filtered["Treatment"].value_counts().reset_index()
        treat_counts.columns = ["Traitement", "count"]
        fig = px.bar(treat_counts, x="Traitement", y="count", title="Type de traitement")
        st.plotly_chart(fig, use_container_width=True)

    with col7:
        smoker_counts = df_filtered["Smoker"].value_counts().reset_index()
        smoker_counts.columns = ["Fumeur", "count"]
        fig = px.bar(smoker_counts, x="Fumeur", y="count", title="Statut tabagique")
        st.plotly_chart(fig, use_container_width=True)

    with col8:
        activity_counts = df_filtered["Physical_Activity"].value_counts().reset_index()
        activity_counts.columns = ["Activit√©", "count"]
        fig = px.bar(activity_counts, x="Activit√©", y="count", title="Activit√© physique")
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("---")

    # üìà Courbe de survie Kaplan-Meier
    st.subheader("üìà Survie estim√©e (Kaplan-Meier)")
    if "Time_to_Event" in df_filtered.columns and "Event_Observed" in df_filtered.columns:
        kmf = KaplanMeierFitter()
        kmf.fit(df_filtered["Time_to_Event"], event_observed=df_filtered["Event_Observed"])
        fig_km, ax_km = plt.subplots(figsize=(6, 4))
        kmf.plot_survival_function(ax=ax_km)
        ax_km.set_title("Courbe de survie globale")
        ax_km.set_xlabel("Temps")
        ax_km.set_ylabel("Probabilit√© de survie")
        st.pyplot(fig_km)

        st.markdown(f"""
        üß† **Interpr√©tation automatique** :
        - Probabilit√© de survie initiale : 1.0 (100%)
        - Probabilit√© de survie √† {df_filtered["Time_to_Event"].median():.0f} ‚âà **{kmf.predict(df_filtered["Time_to_Event"].median()):.2f}**
        - La survie diminue progressivement, refl√©tant les √©v√©nements observ√©s dans le temps.
        """)

    st.markdown("---")

    # üìâ Risque cumul√© (Nelson-Aalen)
    st.subheader("üìâ Courbe du risque cumul√© (Nelson-Aalen)")
    naf = NelsonAalenFitter()
    naf.fit(df_filtered["Time_to_Event"], event_observed=df_filtered["Event_Observed"])
    fig_naf, ax_naf = plt.subplots(figsize=(6, 4))
    naf.plot_cumulative_hazard(ax=ax_naf)
    ax_naf.set_title("Risque cumul√© au fil du temps")
    ax_naf.set_xlabel("Temps")
    ax_naf.set_ylabel("Risque cumul√©")
    st.pyplot(fig_naf)

    st.markdown("""
    üß† **Interpr√©tation** : le risque cumul√© augmente avec le temps, ce qui indique une probabilit√© croissante que l'√©v√©nement √©tudi√© se produise. Cela permet de mieux comprendre l‚Äô√©volution du danger au fil de temps.
    """)

    st.markdown("---")

    # üìä R√©partition d√©mographique
    st.subheader("üßì R√©partition d√©mographique")
    col9, col10 = st.columns(2)

    with col9:
        fig_age = px.histogram(df_filtered, x="Age", nbins=20, title="Distribution des √¢ges")
        st.plotly_chart(fig_age, use_container_width=True)

    with col10:
        if "BMI" in df_filtered.columns:
            fig_bmi = px.histogram(df_filtered, x="BMI", nbins=20, title="Distribution du BMI")
            st.plotly_chart(fig_bmi, use_container_width=True)

    st.markdown("---")

    # üìå Heatmap des corr√©lations
    st.subheader("üìå Corr√©lations entre variables num√©riques")
    numeric_df = df_filtered.select_dtypes(include="number")
    if not numeric_df.empty and len(numeric_df.columns) >= 2:
        corr = numeric_df.corr()
        fig_corr, ax_corr = plt.subplots(figsize=(10, 6))
        sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f", ax=ax_corr)
        ax_corr.set_title("Carte des corr√©lations")
        st.pyplot(fig_corr)
    else:
        st.warning("Pas assez de variables num√©riques pour afficher une carte de corr√©lation.")

    st.markdown("---")

    # üßæ Tableau des donn√©es filtr√©es
    st.subheader("üìã Donn√©es filtr√©es")
    st.dataframe(df_filtered.head(100))  # Affiche les 100 premi√®res lignes max
    st.markdown(f"**{len(df_filtered)} lignes affich√©es**")

elif selected_section == "√Ä propos du projet":
    st.title("√Ä propos de ce projet d'analyse de survie")

    st.markdown("""
        ## üéì Projet d'Ing√©nierie des Donn√©es - Analyse de Survie


        ### üë®‚Äçüî¨ Contexte :
          Ce projet vise √† analyser la survie de patients en fonction de divers facteurs cliniques en utilisant les techniques d'analyse de survie.


        ### üß™ M√©thodologie :
        Les m√©thodes d'analyse de survie utilis√©es comprennent :
            - Estimation de Kaplan-Meier
            - Mod√®le de Cox √† risques proportionnels
            - Estimation de Nelson-Aalen


        ### üì¶ Technologies :
            - Python
            - Lifelines (pour l'analyse de survie)
            - Streamlit (pour l'application web)
            - Pandas (pour la manipulation des donn√©es)
            - Matplotlib et Plotly (pour la visualisation)


        ### üë• R√©alis√© par :
            - Rafiq MAHROUG
            - Ornelia FRANCISCO
            - Abdellatif BENBAHA


        ### üîó Liens utiles :
            - [Documentation Lifelines](https://lifelines.readthedocs.io/)
            - [Documentation Streamlit](https://docs.streamlit.io/)
    """)
